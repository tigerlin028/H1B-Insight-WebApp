{"ast":null,"code":"var _jsxFileName = \"/Users/jiahua_liao/Documents/2024 Fall/CIS 550/Homework/Homework 3/HW3_student/client/src/pages/AlbumInfoPage.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Container, Link, Stack, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@mui/material';\nimport SongCard from '../components/SongCard';\nimport { formatDuration, formatReleaseDate } from '../helpers/formatter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst config = require('../config.json');\nexport default function AlbumInfoPage() {\n  _s();\n  const {\n    album_id\n  } = useParams();\n  const [songData, setSongData] = useState([{}]); // default should actually just be [], but empty object element added to avoid error in template code\n  const [albumData, setAlbumData] = useState([]);\n  const [selectedSongId, setSelectedSongId] = useState(null);\n  useEffect(() => {\n    fetch(`http://${config.server_host}:${config.server_port}/album/${album_id}`).then(res => res.json()).then(resJson => setAlbumData(resJson));\n    fetch(`http://${config.server_host}:${config.server_port}/album_songs/${album_id}`).then(res => res.json()).then(resJson => setSongData(resJson));\n  }, [album_id]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [selectedSongId && /*#__PURE__*/_jsxDEV(SongCard, {\n      songId: selectedSongId,\n      handleClose: () => setSelectedSongId(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 26\n    }, this), /*#__PURE__*/_jsxDEV(Stack, {\n      direction: \"row\",\n      justify: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: albumData.thumbnail_url,\n        alt: `${albumData.title} album art`,\n        style: {\n          marginTop: '40px',\n          marginRight: '40px',\n          marginBottom: '40px'\n        }\n      }, albumData.album_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Stack, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          style: {\n            fontSize: 64\n          },\n          children: albumData.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Released: \", formatReleaseDate(albumData.release_date)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"#\"\n            }, '#', false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Title\"\n            }, 'Title', false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Plays\"\n            }, 'Plays', false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Duration\"\n            }, 'Duration', false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children:\n          /*#__PURE__*/\n          // TODO (TASK 23): render the table content by mapping the songData array to <TableRow> elements\n          // Hint: the skeleton code for the very first row is provided for you. Fill out the missing information and then use a map function to render the rest of the rows.\n          // Hint: it may be useful to refer back to LazyTable.js\n          _jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: songData[0].number\n            }, '#', false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                onClick: () => setSelectedSongId(songData[0].song_id),\n                children: \"Replace me\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 19\n              }, this)\n            }, 'Title', false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Replace me\"\n            }, 'Plays', false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Replace me (use the formatDuration helper function, see SongCard.js for an example)\"\n            }, 'Duration', false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 17\n            }, this)]\n          }, songData[0].song_id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n_s(AlbumInfoPage, \"E/GwsB466xNrstuxmYafVSX8xsk=\", false, function () {\n  return [useParams];\n});\n_c = AlbumInfoPage;\nvar _c;\n$RefreshReg$(_c, \"AlbumInfoPage\");","map":{"version":3,"names":["useEffect","useState","useParams","Container","Link","Stack","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","SongCard","formatDuration","formatReleaseDate","config","require","AlbumInfoPage","album_id","songData","setSongData","albumData","setAlbumData","selectedSongId","setSelectedSongId","fetch","server_host","server_port","then","res","json","resJson","thumbnail_url","title","marginTop","marginRight","marginBottom","fontSize","release_date","number","song_id"],"sources":["/Users/jiahua_liao/Documents/2024 Fall/CIS 550/Homework/Homework 3/HW3_student/client/src/pages/AlbumInfoPage.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Container, Link, Stack, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@mui/material';\n\nimport SongCard from '../components/SongCard';\nimport { formatDuration, formatReleaseDate } from '../helpers/formatter';\nconst config = require('../config.json');\n\nexport default function AlbumInfoPage() {\n  const { album_id } = useParams();\n\n  const [songData, setSongData] = useState([{}]); // default should actually just be [], but empty object element added to avoid error in template code\n  const [albumData, setAlbumData] = useState([]);\n\n  const [selectedSongId, setSelectedSongId] = useState(null);\n\n  useEffect(() => {\n    fetch(`http://${config.server_host}:${config.server_port}/album/${album_id}`)\n      .then(res => res.json())\n      .then(resJson => setAlbumData(resJson));\n\n    fetch(`http://${config.server_host}:${config.server_port}/album_songs/${album_id}`)\n      .then(res => res.json())\n      .then(resJson => setSongData(resJson));\n  }, [album_id]);\n\n  return (\n    <Container>\n      {selectedSongId && <SongCard songId={selectedSongId} handleClose={() => setSelectedSongId(null)} />}\n      <Stack direction='row' justify='center'>\n        <img\n          key={albumData.album_id}\n          src={albumData.thumbnail_url}\n          alt={`${albumData.title} album art`}\n          style={{\n            marginTop: '40px',\n            marginRight: '40px',\n            marginBottom: '40px'\n          }}\n        />\n        <Stack>\n          <h1 style={{ fontSize: 64 }}>{albumData.title}</h1>\n          <h2>Released: {formatReleaseDate(albumData.release_date)}</h2>\n        </Stack>\n      </Stack>\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell key='#'>#</TableCell>\n              <TableCell key='Title'>Title</TableCell>\n              <TableCell key='Plays'>Plays</TableCell>\n              <TableCell key='Duration'>Duration</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {\n              // TODO (TASK 23): render the table content by mapping the songData array to <TableRow> elements\n              // Hint: the skeleton code for the very first row is provided for you. Fill out the missing information and then use a map function to render the rest of the rows.\n              // Hint: it may be useful to refer back to LazyTable.js\n              <TableRow key={songData[0].song_id}>\n                <TableCell key='#'>{songData[0].number}</TableCell>\n                <TableCell key='Title'>\n                  <Link onClick={() => setSelectedSongId(songData[0].song_id)}>\n                    Replace me\n                  </Link>\n                </TableCell>\n                <TableCell key='Plays'>Replace me</TableCell>\n                <TableCell key='Duration'>Replace me (use the formatDuration helper function, see SongCard.js for an example)</TableCell>\n              </TableRow>\n            }\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Container>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}